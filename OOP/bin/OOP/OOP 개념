1.객체 지향 프로그래밍
	현실세계를 기반으로 상태와 행위를 가진 추상화시킨 객체를 만들고, 그 객체들간의 유기적인 상호작용을 통해 프로그래밍하는 프로그래밍 패러다임중 하나.

2.객체란?
	물리적으로 존재하거나 추상적으로 생각할 수 있는 속성과 동작을 가지는 것.
	
3.객체의 상호작용
	메서드를 통해 객체간의 상호작용을 한다.
	객체에서 다른 객체의 기능을 이용하는 것을 메소드 호출이라 한다.
	
4.객체 간의 관계
	크게 집합 관계,사용 관계,상속 관계 세가지로 나눌 수 있는데,
	사용 관계는 말그대로 객체 간의 상호작용을 말한다.
	집합 관계는 해당 객체를 이루는 구성객체들을 말하고,
	상속 관계는 해당 객체의 상위 관계를 말한다.
	
5.객체 지향 프로그래밍의 특징
	1.캡슐화
		객체의 실제 구현 내용을 감추는 것을 말한다.
		예를 들어 TV의 중요한 부품이 바깥으로 노출되어 있다면, 사용자의 실수로 인해 고장날 수도 있다.
		외부로부터 객체를 캡슐화하여 보호하면 외부의 잘못된 사용으로 인해 객체가 손상되는것을 방지할 수 있다,
		자바 언어는 캡슐화된 멤버를 노출시킬 것인지,숨길 것인지를 결정하기 위해 접근 제한자를 사용한다.
	
	2.상속
		상속은 상위 객체를 재사용해서 하위 객체를 쉽고 빨리 설계할 수 있도록 도와준다.
		반복된 코드의 중복을 줄여준다.
		
	3.다형성
		같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질을 말한다.
		
6.클래스의 구성 멤버
	1.필드
		객체 고유의 데이터, 부품 객체, 상태 정보를 저장하는 곳이다.
	
	2.생성자
		객체 생성 시 초기화를 담당한다.
		필드를 초기화하거나,메서드를 호출해서 객체를 사용할 준비를 한다.
		
	3.메서드
		객체의 동작에 해당한다.
		